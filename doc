# Crear distintos subplots para el EDA

fig, axs = plt.subplots(ncols = 4,
                       nrows = 1,
                       figsize= (11,3))
axs[0].boxplot(df_diamonds['table'])
axs[0].set(title='Table')
axs[1].boxplot(df_diamonds['depth'])
axs[1].set(title='Depth')
axs[2].boxplot(df_diamonds['price'])
axs[2].set(title='Price')
axs[3].boxplot(df_diamonds['carat'])
axs[3].set(title='Carat')


# Leer distintos datasets

# Import datasets
content = os.listdir('../data/raw_data/')

# With this function I can extract all of datasets in diferent dataframes. In order to understand each dataframe, I will 
# print the name, columns name and shape of each dataframe.
for name_file in content:
    name_df = name_file.split('.')[0] + '_df'
    exec(f'{name_df} = pd.read_csv(f"../data/raw_data/{name_file}", sep=",")')
    exec(f'columns_name = {name_df}.columns.values')
    exec(f'shape = {name_df}.shape')
    print(name_df,'| columns names: ', columns_name, '| df shape: ', shape)


# EDA esencial pair plot
sns.pairplot(df_diamonds)
plt.show()

def cat_var(df, cols):
    '''
    Return: a Pandas dataframe object with the following columns:
        - "categorical_variable" => every categorical variable include as an input parameter (string).
        - "number_of_possible_values" => the amount of unique values that can take a given categorical variable (integer).
        - "values" => a list with the posible unique values for every categorical variable (list).

    Input parameters:
        - df -> Pandas dataframe object: a dataframe with categorical variables.
        - cols -> list object: a list with the name (string) of every categorical variable to analyse.
    '''
    cat_list = []
    for col in cols:
        cat = df[col].unique()
        cat_num = len(cat)
        cat_dict = {"categorical_variable":col,
                    "number_of_possible_values":cat_num,
                    "values":cat}
        cat_list.append(cat_dict)
    df = pd.DataFrame(cat_list).sort_values(by="number_of_possible_values", ascending=False)
    return df.reset_index(drop=True)
